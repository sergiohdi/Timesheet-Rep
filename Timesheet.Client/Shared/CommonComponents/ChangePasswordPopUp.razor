@inject IUserDataService userService
@inject IComponentComunicationService notificationSrv
@inject ILocalStorageService localStorageSrv
@inject IJSRuntime JSRuntime

@* Todo: move these styles to a new css file *@
<style>
    .colorbutton {
        background-color: #ff5c1a;
        width: 120px;
    }

    .colorcancel {
        background-color: whitesmoke;
        color: #000000;
    }
</style>

<h4 class="k-label k-form-label">Change Password</h4>
<TelerikForm Model="@changePasswordModel" OnValidSubmit="@UpdatePassword">
    <FormValidation>
        <DataAnnotationsValidator></DataAnnotationsValidator>
    </FormValidation>
    <FormItems>
        <FormItem Field="@nameof(Timesheet.Client.Models.ChangePassword.CurrentPassword)">
            <Template>
                <div>
                    <div>
                        <label for="currentPassword" class="k-label k-form-label">Current Password:</label>
                    </div>
                    <div style="display: flex; align-items: center; gap: 4px;">
                        <TelerikTextBox Id="currentPassword" @bind-Value="@changePasswordModel.CurrentPassword" Password="@buttons[0]" Width="85%"></TelerikTextBox>
                        <TelerikButton OnClick="@(() => RevealPassword(0))"
                                       Icon="@SvgIcon.Eye"
                                       ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)"
                                       ButtonType="ButtonType.Button"></TelerikButton>
                    </div>
                    <TelerikValidationMessage For="@(() => changePasswordModel.CurrentPassword)"></TelerikValidationMessage>
                </div>
            </Template>
        </FormItem>
        <FormItem Field="@nameof(Timesheet.Client.Models.ChangePassword.NewPassword)">
            <Template>
                <div>
                    <div>
                        <label for="newPassword" class="k-label k-form-label">New Password:</label>
                    </div>
                    <div style="display: flex; align-items: center; gap: 4px;">
                        <TelerikTextBox Id="newPassword" @bind-Value="@changePasswordModel.NewPassword" Password="@buttons[1]" Width="85%"></TelerikTextBox>
                        <TelerikButton OnClick="@(() => RevealPassword(1))"
                                       Icon="@SvgIcon.Eye"
                                       ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)"
                                       ButtonType="ButtonType.Button"></TelerikButton>
                    </div>
                    <TelerikValidationMessage For="@(() => changePasswordModel.NewPassword)"></TelerikValidationMessage>
                </div>
            </Template>
        </FormItem>
        <FormItem Field="@nameof(Timesheet.Client.Models.ChangePassword.ConfirmPassword)">
            <Template>
                <div>
                    <div>
                        <label for="confirmPassword" class="k-label k-form-label">Confirm Password:</label>
                    </div>
                    <div style="display: flex; align-items: center; gap: 4px;">
                        <TelerikTextBox Id="confirmPassword" @bind-Value="@changePasswordModel.ConfirmPassword" Password="@buttons[2]" Width="85%"></TelerikTextBox>
                        <TelerikButton OnClick="@(() => RevealPassword(2))"
                                       Icon="@SvgIcon.Eye"
                                       ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)"
                                       ButtonType="ButtonType.Button"></TelerikButton>
                    </div>
                    <TelerikValidationMessage For="@(() => changePasswordModel.ConfirmPassword)"></TelerikValidationMessage>
                </div>
            </Template>
        </FormItem>
    </FormItems>

    <FormButtons>
        <div class="form-buttons">
            <TelerikButton Icon="@nameof(FontIcon.Save)" Class="colorbutton" Enabled="@isButtonEnabled">Save</TelerikButton>
            @if (IsPopup)
            {
                <TelerikButton Icon="@nameof(FontIcon.Cancel)" ButtonType="@ButtonType.Button" Class="colorcancel" OnClick="@OnUpdatePassword">Cancel</TelerikButton>
            }
        </div>
    </FormButtons>
</TelerikForm>

@code {
    [Parameter]
    public bool IsPopup { get; set; }
    [Parameter]
    public string Email { get; set; }
    [Parameter]
    public EventCallback ClosePopup { get; set; }

    private Timesheet.Client.Models.ChangePassword changePasswordModel = new Timesheet.Client.Models.ChangePassword();
    private bool[] buttons = new bool[] { true, true, true };
    private bool hidePassword1;
    private bool hidePassword2;
    private bool hidePassword3;
    private bool isButtonEnabled = true;

    public async Task UpdatePassword()
    {
        isButtonEnabled = false;
        changePasswordModel.EmailId = Email;
        var result = await userService.UpdatePassword(changePasswordModel);
        if (result.Status == ResponseStatus.Success)
        {
            await OnUpdatePassword();
        }

        isButtonEnabled = true;
        notificationSrv.SendNotification(new Notification
            {
                NotificationType = ThemeConstants.Notification.ThemeColor.Warning,
                Message = "An error occurred updating the password"
            });

    }

    public async Task OnUpdatePassword()
    {
        await ClosePopup.InvokeAsync();
    }

    public void RevealPassword(int button)
    {
        buttons[button] = !buttons[button];
    }
}
