@inherits LayoutComponentBase
@inject IComponentComunicationService notificationSrv
@implements IDisposable



<TelerikRootComponent>
    <div class="main">
        @*<nav class="navbar navbar-expand-lg navbar-dark bg-dark header" style="height: 100px !important">*@
        <nav class="navbar navbar-expand-lg navbar-dark bg-dark header">
            <a class="navbar-brand" href="#">Timesheet</a>
            <div class="collapse navbar-collapse" id="navbarNav">
                <NavMenu />
            </div>
        </nav>
        <div class="content px-4" style="@((isTimesheet) ? "padding-left: 1rem !important; padding-right: 1rem !important; margin-top:-13px": string.Empty)">
            <div style="max-height: 900px; height:900px; overflow-y: auto">
                @Body
            </div>
            <TelerikNotification @ref="NotificationComponent"
                         HorizontalPosition="@NotificationHorizontalPosition.Center"
                                 VerticalPosition="@NotificationVerticalPosition.Top"></TelerikNotification>
        </div>
    </div>

</TelerikRootComponent>

@code{
    TelerikNotification NotificationComponent { get; set; }
    private bool isTimesheet = false;

    protected override void OnInitialized()
    {
        notificationSrv.Subscriber += NotificationHandler;
        notificationSrv.ChangeWidthSubscriber += ChangeWidthHandler;
    }

    // When component is destroyed
    public void Dispose()
    {
        notificationSrv.Subscriber -= NotificationHandler;
        notificationSrv.ChangeWidthSubscriber -= ChangeWidthHandler;
    }

    private void NotificationHandler(Notification notification)
    {
        NotificationComponent.Show(new NotificationModel
            {
                Text = notification.Message,
                ThemeColor = notification.NotificationType,
            });
    }

    private void ChangeWidthHandler(bool value)
    {
        isTimesheet = value;
        StateHasChanged();
    } 
}