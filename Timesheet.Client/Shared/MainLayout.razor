@inherits LayoutComponentBase
@inject IComponentComunicationService notificationSrv
@implements IDisposable



<style>
    .main {
        /* background-color: #000; /* Sets the background color to black */ */
        color: #fff; /* Sets the text color to white */
    }

    .navbar, .navbar-brand, .navbar-nav .nav-link {
        color: #fff !important; /* Ensures text color is white in the navbar */
    }
     .black-bg

    {
        background-color: #000 !important;
    }

    .telerik-icon2 {
        margin-right: 8px;
        color: gold;
        font-size: 38px;
    }
</style>

<TelerikRootComponent>
    <div class="main">
        <nav class="navbar navbar-expand-lg navbar-dark bg-dark header black-bg">
            <TelerikFontIcon Icon="@FontIcon.Clock" class="telerik-icon2" />
            <div class="collapse navbar-collapse" id="navbarNav">
                <NavMenu />
            </div>
        </nav>
        <div class="content px-4" style="@((isTimesheet) ? "padding-left: 1rem !important; padding-right: 1rem !important; margin-top:-13px": string.Empty)">
            <div style="max-height: 900px; height:900px; overflow-y: auto">
                @Body
            </div>
            <TelerikNotification @ref="NotificationComponent"
                                 HorizontalPosition="@NotificationHorizontalPosition.Center"
                                 VerticalPosition="@NotificationVerticalPosition.Top"></TelerikNotification>
        </div>
    </div>
</TelerikRootComponent>


@code{
    TelerikNotification NotificationComponent { get; set; }
    private bool isTimesheet = false;

    protected override void OnInitialized()
    {
        notificationSrv.Subscriber += NotificationHandler;
        notificationSrv.ChangeWidthSubscriber += ChangeWidthHandler;
    }

    // When component is destroyed
    public void Dispose()
    {
        notificationSrv.Subscriber -= NotificationHandler;
        notificationSrv.ChangeWidthSubscriber -= ChangeWidthHandler;
    }

    private void NotificationHandler(Notification notification)
    {
        NotificationComponent.Show(new NotificationModel
            {
                Text = notification.Message,
                ThemeColor = notification.NotificationType,
            });
    }

    private void ChangeWidthHandler(bool value)
    {
        isTimesheet = value;
        StateHasChanged();
    } 
}