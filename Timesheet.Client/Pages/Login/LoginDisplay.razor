@inject NavigationManager navigation
@using System.Security.Claims
@using Timesheet.Client.Utils.Auth

@inject AuthenticationStateProvider authProvider
@inject ILocalStorageService localStorageSrv

<AuthorizeView>
    <Authorized>
        <div class="dropdown">
            <a class="dropdown-toggle" href="#" role="button" data-toggle="dropdown" aria-expanded="false" style="color:gold; text-decoration: none;">
                @context.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Name).Value
            </a>
            <div class="dropdown-menu">
                <button class="dropdown-item" @onclick="RedirectToChangePassword">
                    <TelerikFontIcon Icon="@FontIcon.TrackChanges" class="telerik-icon" />
                    Change Password
                </button>

                <button class="dropdown-item" @onclick="RedirectToLogOut">
                    <TelerikFontIcon Icon="@FontIcon.User" class="telerik-icon" />
                    Log out
                </button>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    public void RedirectToLogOut()
    {
        ((JwtAuthStateProvider)authProvider).LogOut();
        localStorageSrv.RemoveItemAsync("token");
        navigation.NavigateTo("/login");
    }

    public void RedirectToChangePassword()
    {
        navigation.NavigateTo("/changePassword", forceLoad: true);
    }
}    
