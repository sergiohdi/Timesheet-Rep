@page "/activities"

@inject IActivityService activityService
@inject IComponentComunicationService notificationSrv

<style>
    .colorbutton {
        background-color: #ff5c1a;
        width: 120px;
    }

    .colorcancel {
        background-color: whitesmoke;
        color: #000000;
    }

    .my-form.k-form .k-form-buttons {
        justify-content: flex-end;
    }

    .required-field::before {
        content: attr(LabelText);
        vertical-align: middle;
    }
    .required-field > .k-label::after {
        content: "*";
        color: red;
        margin-left: 3px;
    }
</style>

    @if (_activities == null)
    {
        <TelerikLoaderContainer Visible="@( _activities == null )" Text="Loading Activities..." />
    }
    else
    {
        <h3>Activities</h3>

    @*    <div class="jumbotron filter">
            <div class="filter-cell">
                <label>Status:</label>
                <TelerikDropDownList Data="@_customFilterData" TextField="Value" ValueField="Key" @bind-Value="selectedValue" OnChange="@FilterTable">
                </TelerikDropDownList>
            </div>
        </div>*@

        <TelerikGrid Data=@_activities
                 EditMode="@GridEditMode.Popup"
                 @ref="@GridRef"
                 Pageable="true"
                 PageSize="12"
                 Navigable="true"
                 ConfirmDelete="true"
                 FilterMode="Telerik.Blazor.GridFilterMode.FilterRow"
                 OnDelete=@DeleteActivity>
            <GridToolBarTemplate>
                <GridCommandButton Command="Add" Icon="@FontIcon.Plus">New</GridCommandButton>
            </GridToolBarTemplate>
            <GridSettings>
                <GridPopupEditSettings MaxWidth="1800px"
                                   MaxHeight="1200px"
                                   Class="custom-popup">
                </GridPopupEditSettings>
                <GridPopupEditFormSettings Orientation="@FormOrientation.Horizontal"
                                       ButtonsLayout="FormButtonsLayout.Start">
                    <FormTemplate>
                        @{
                            EditItem = context.Item as Activity;

                            <TelerikForm Model="EditItem" OnValidSubmit="@OnValidSubmit" Columns="2" ColumnSpacing="10px" Class="my-form">
                                <FormValidation>
                                    <DataAnnotationsValidator />
                                </FormValidation>
                                <FormItems>
                                    <FormItem Field="ActivityName" LabelText="Name" Class="required-field"></FormItem>
                                    <FormItem Field="ActivityCode" LabelText="Activity Code" Class="required-field"></FormItem>
                                    <FormItem Field="Status">
                                        <Template>
                                            <div>
                                                <label for="myComboBox">Status</label>
                                            </div>
                                            <div>
                                                <TelerikComboBox Id="myComboBox" Data="@StatusOptions" ClearButton="false" TextField="Text" ValueField="Value" @bind-Value="@EditItem.Disabled" />
                                            </div>
                                        </Template>
                                    </FormItem>


                                </FormItems>
                                <FormButtons>
                                    <TelerikButton Icon="@nameof(FontIcon.Save)" Class="colorbutton">Save</TelerikButton>
                                    <TelerikButton Icon="@nameof(FontIcon.Cancel)" ButtonType="@ButtonType.Button" Class="colorcancel" OnClick="@OnCancel">Cancel</TelerikButton>
                                </FormButtons>
                            </TelerikForm>
                        }
                    </FormTemplate>



                </GridPopupEditFormSettings>
            </GridSettings>

            <GridColumns>

                <GridCommandColumn Width="30px">
                    <GridCommandButton Command="Edit" Icon="@FontIcon.Pencil" Class="_btn _btnEdit"></GridCommandButton>
                    <GridCommandButton Command="Delete" Icon="@FontIcon.Trash" Class="_btn red _btnDelete"></GridCommandButton>
                    <GridCommandButton Command="Save" Icon="@FontIcon.Save" ShowInEdit="true">Update</GridCommandButton>
                    <GridCommandButton Command="Cancel" Icon="@FontIcon.Cancel" ShowInEdit="true">Cancel</GridCommandButton>
                </GridCommandColumn>

                <GridColumn Field="@nameof(Activity.ActivityName)" Title="Name" Width="140px" />
                <GridColumn Field="@nameof(Activity.ActivityCode)" Title="Code" Width="140px" />
                <GridColumn Field="@nameof(Activity.Disabled)" Title="Status" Width="100px">
                    <FilterCellTemplate>
                        <TelerikDropDownList Data="@_customFilterData" TextField="Value" ValueField="Key" @bind-Value="selectedValue" OnChange="@FilterTable">
                        </TelerikDropDownList>
                    </FilterCellTemplate>
                    <Template>
                        @((context as Activity).Disabled.Value ? "Disabled" : "Enabled")
                    </Template>
                </GridColumn>
            </GridColumns>
        </TelerikGrid>
    }

    @code {
        [CascadingParameter]
        public DialogFactory Dialogs { get; set; }
        public List<Activity> _activities = null;
        public Activity EditItem { get; set; }
        public TelerikGrid<Activity> GridRef { get; set; }

        private string _tempActivities;

        protected override async Task OnInitializedAsync()
        {
            await GetActivities();
            SetTempActivities();
        }

        private async Task GetActivities()
        {
            _activities = (await activityService.GetActivities(false)).Data.ToList();
        }

        private async Task OnValidSubmit()
        {
            if (EditItem.ActivityId != default)
            {
                ApiResponse<bool> result = await activityService.UpdateActivity(EditItem);
                if (result.Status == ResponseStatus.Success)
                {
                    notificationSrv.SendNotification(new Notification
                        {
                            NotificationType = NotificationType.Success,
                            Message = "The user has been updated successfully"
                        });
                }
            }
            else
            {
                ApiResponse<bool> result = await activityService.CreateActivity(EditItem);
                if (result.Status == ResponseStatus.Success)
                {
                    notificationSrv.SendNotification(new Notification
                        {
                            NotificationType = NotificationType.Success,
                            Message = "The activity has been created successfully"
                        });
                }
            }

            await ExitEditAsync();
            await GetActivities();
            StateHasChanged();
        }

        public async Task DeleteActivity(GridCommandEventArgs args)
        {
            ApiResponse<bool> response = await activityService.DeleteActivity(((Activity)args.Item).ActivityId);

            if (response.Status == ResponseStatus.Success)
            {
                if (!response.Data)
                {
                    notificationSrv.SendNotification(new Notification
                        {
                            NotificationType = ThemeConstants.Notification.ThemeColor.Warning,
                            Message = "The activity cannot be deleted as it does have records on the Database."
                        });

                    return;
                }
                _activities.Remove((Activity)args.Item);
                SetTempActivities();
                notificationSrv.SendNotification(new Notification
                    {
                        NotificationType = ThemeConstants.Notification.ThemeColor.Success,
                        Message = "The activity was deleted successfully"
                    });
            }
            else
            {
                notificationSrv.SendNotification(new Notification
                    {
                        NotificationType = NotificationType.Error,
                        Message = "The activity was not deleted"
                    });
            }
        }
        private void SetTempActivities()
        {
            _tempActivities = JsonConvert.SerializeObject(_activities);
        }

        private async Task OnCancel()
        {
            await ExitEditAsync();
        }

        private async Task ExitEditAsync()
        {
            var state = GridRef?.GetState();
            state.OriginalEditItem = null;
            state.EditItem = null;
            state.InsertedItem = null;

            await GridRef?.SetStateAsync(state);
        }

        List<StatusOption> StatusOptions { get; set; } = new List<StatusOption>()
        {
            new StatusOption() { Text = "Disabled", Value = true },
            new StatusOption() { Text = "Enabled", Value = false }
        };


        public class StatusOption
        {
            public string Text { get; set; }
            public bool Value { get; set; }
        }

        private class KeyValue
        {
            public int Key { get; set; }
            public string Value { get; set; }
        }

        private List<KeyValue> _customFilterData = new List<KeyValue>
        {
            new KeyValue { Key = 0, Value = "All" },
            new KeyValue { Key = 1, Value = "Disabled" },
            new KeyValue { Key = 2, Value = "Enabled" },
        };

        private int selectedValue = 0;

        private void FilterTable(object item)
        {
            var activities = JsonConvert.DeserializeObject<IEnumerable<Activity>>(_tempActivities);

            switch (item)
            {
                case 0:
                    _activities = activities.ToList();
                    break;
                case 1:
                    _activities = activities.Where(x => x.Disabled.Value).ToList();
                    break;
                case 2:
                    _activities = activities.Where(x => !x.Disabled.Value).ToList();
                    break;
                default:
                    _activities = activities.ToList();
                    break;
            }
        }



    }




