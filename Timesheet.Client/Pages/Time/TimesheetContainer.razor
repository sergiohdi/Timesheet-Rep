@page "/timesheet"
@attribute [Authorize]

@inject IClientDataService clientSrv
@inject IUserDataService userSrv
@inject ITimesheetService timesheetSrv
@inject ITimesheetValidationsService timesheetValidationSrv
@inject IApprovalDataService approvalSrv
@inject IGeneralDataService generalSrv
@inject IProjectDataService projectSrv
@inject IComponentComunicationService comunicationSrv
@inject NavigationManager navManager

@implements IDisposable

<div class="custom-container">
    <div class="controls">
        <SelectCalendar ShowLinks="true" OnReturnDates="SetDates" />
        <div>
            <button class="btn btn-info btn-sm custom-button" title="Search" @onclick="ChangePeriod">
                View <i class="fas fa-search"></i>
            </button>
        </div>
    </div>

    @if (!_contentLoaded)
    {
        <TelerikLoaderContainer Text="Loading Timesheet..." />
    }
    else
    {
        <div class="grid-actions">
            <div>
                <StatusButton StatusName="@_statusStr" />
            </div>
            @if (timesheetSrv.TimesheetControl?.ApprovalStatusId == (int)ApprovalStatusOption.NotSubmitted)
            {
                <div>
                    <button class="btn btn-primary btn-sm" title="Send to approve" @onclick=CreateRegularTimeRequest> Submit for approval </button>
                    <button class="btn btn-info btn-sm custom-button" @onclick=AddNewRegularTimeRecord>Add Regular Time</button>
                    <button class="btn btn-info btn-sm custom-button" @onclick=OpenTimeOffPopUp>Add Time Off</button>
                </div>
            }
        </div>

        @if (timesheetErrors.Any())
        {
            <div style="color: red; margin-top: 10px;">
                <ul>
                    @foreach (string error in timesheetErrors)
                    {
                        <li>@error</li>
                    }
                </ul>
            </div>
        }


        <div class="grid-container">
            <RegularTime Days="_days"
                         BillingStatusList="_billingStatus"
                         ProjectList="_projects"
                         ClientList="_clients"
                         UserActivities="_userActivities"
                         LocationList="_locations"
                         OnRegularTimeCreated="OnRegularTimeAdded" />
            <TimeoffTime Days="_days"
                         TimeOffRecords="_timeOffRecords"
                         OnTimeOffAction="GetTimeoffData" />
            <TotalTimeGrid />
        </div>


        <div style="margin-top: 15px;">
            @if (timesheetSrv.TimeEntryDetails is not null)
            {
                <RegularEntryDetails GridData="timesheetSrv.TimeEntryDetails" />
            }
        </div>

        <div style="margin-top: 15px;">
            @if (timesheetSrv.ApprovalsHistory is not null)
            {
                <ApprovalHistoryGrid GridData="timesheetSrv.ApprovalsHistory.Where(x => x.TimesheetType == (int)ApprovalType.RegularTime).ToList()" />
            }
        </div>
    }
</div>

@code {
    private int _selectedYear = DateTime.Now.Year;
    private int _selectedMonth = DateTime.Now.Month;
    private int _selectedPeriod = DateTime.Now.Day > 15 ? 2 : 1;
    private TimesheetControl timesheetControl;
    private string _statusStr = "Not Submited";
    private IEnumerable<string> timesheetErrors = Enumerable.Empty<string>();
    private List<ClientLight> _clients = new List<ClientLight>
    {
        new ClientLight { Id = 0, Name = "Select a client"}
    };
    private List<General> _locations = null;
    private List<UserActivityCodeLight> _userActivities = new List<UserActivityCodeLight>
    {
        new UserActivityCodeLight { ActivityId = 0, ActivityName = "Select an activty"}
    };
    private List<General> _billingStatus = null;
    private List<ProjectLight> _projects = new List<ProjectLight>
    {
        new ProjectLight { ClientId = 0, Id = 0, Name = "Select a project" }
    };
    private IEnumerable<TimeoffApproval> _timeOffRecords = Enumerable.Empty<TimeoffApproval>();
    private List<(int day, bool isWeekendDay)> _days = new List<(int day, bool isWeekendDay)>();
    private bool _contentLoaded = false;

    // Temp Variables
    // Replace this user id value for user id token claim
    private int _userId = 0;

    protected async override Task OnInitializedAsync()
    {
        comunicationSrv.SendChangeWidth(true);
        GetPeriodParametersFromUrl();
        await GetTimesheetControlRecord();

        DateTime startPeriod = GetPeriod();
        timesheetSrv.SetStartAndEndPeriod(startPeriod);

        await GetInitialData();

        CalculatePeriodDays();
        await GetTimesheetData();

        SetStringStatus();
        RefreshTimesheet();
    }

    public void Dispose()
    {
        timesheetSrv.ReleaseData();
        comunicationSrv.SendChangeWidth(false);
    }

    private async Task GetInitialData()
    {
        var tasks = new List<Task>
        {
            clientSrv.GetClientsForDropDown().ContinueWith(task => _clients.AddRange(task.Result.Data)),
            userSrv.GetActivitiesByUserForDropDown(_userId).ContinueWith(task => _userActivities.AddRange(task.Result.Data)),
            generalSrv.GetGeneralValues("Location").ContinueWith(task => _locations = task.Result.Data.ToList()),
            projectSrv.GetProjectsForDropDown().ContinueWith(task => _projects.AddRange(task.Result.Data)),
            generalSrv.GetGeneralValues("BillingStatus").ContinueWith(task =>
            {
                _billingStatus = task.Result.Data.Where(x => !x.Value.Equals("Billable & Non-Billable")).ToList();
            }),
            GetTimeOffRecords(),
            GetApprovalsHistory()
        };
        await Task.WhenAll(tasks);
    }

    private async Task GetTimesheetControlRecord()
    {
        DateTime period = DateFunctions.GetPeriod(_selectedYear, _selectedMonth, _selectedPeriod);
        await timesheetSrv.GetTimesheetControlRecord(period);
        if (timesheetSrv.TimesheetControl is null)
        {
            await timesheetSrv.CreateTimesheetControl(period);
        }
    }

    private async Task OnRegularTimeAdded()
    {
        await GetTimesheetData();
        comunicationSrv.SendRefreshTimesheetAction();
    }

    private async Task GetTimesheetData()
    {
        await timesheetSrv.GetTimesheetRecords(
            _userId,
            _selectedYear,
            _selectedMonth,
            _selectedPeriod
        );

        CalculateTimesheetHours();
    }

    private async Task ChangePeriod()
    {
        _contentLoaded = false;
        timesheetErrors = Enumerable.Empty<string>();
        DateTime startPeriod = GetPeriod();
        timesheetSrv.SetStartAndEndPeriod(startPeriod);
        CalculatePeriodDays();
        await GetTimesheetControlRecord();

        var tasks = new List<Task>
        {
            GetTimeOffRecords(),
            GetApprovalsHistory(),
            GetTimesheetData()
        };
        await Task.WhenAll(tasks);

        RefreshTimesheet();
    }

    private void OpenTimeOffPopUp() => comunicationSrv.SendOpenPopUpAction();

    private void GetPeriodParametersFromUrl()
    {
        var uri = new Uri(navManager.Uri);
        var queryParameters = System.Web.HttpUtility.ParseQueryString(uri.Query);
        if (queryParameters.Count > 0)
        {
            int.TryParse(queryParameters["y"], out int year);
            _selectedYear = year > 0 ? year : _selectedYear;
            int.TryParse(queryParameters["m"], out int month);
            _selectedMonth = month > 0 ? month : _selectedMonth;
            int.TryParse(queryParameters["p"], out int period);
            _selectedPeriod = period > 0 ? period : _selectedPeriod;
            int.TryParse(queryParameters["u"], out int userId);
            _userId = userId > 0 ? userId : _userId;
        }
    }

    private void SetStringStatus() =>
        _statusStr = timesheetSrv.TimesheetControl?.ApprovalStatusId switch
        {
            0 => "NotSubmitted",
            1 => "Waiting",
            2 => "Approved",
            3 => "Rejected",
            4 => "SupervisorApproval",
            _ => "NotSubmitted"
        };

    private async void CreateRegularTimeRequest()
    {
        string errorMessage = "An error ocurred trying to create a regular time request";
        List<string> errors = timesheetValidationSrv.ValidateTimesheet();
        if (errors.Any())
        {
            comunicationSrv.SendNotification(new Notification
                {
                    NotificationType = NotificationType.Error,
                    Message = errorMessage
                });
            Console.WriteLine($"errors: {JsonConvert.SerializeObject(errors)} ");
            timesheetErrors = errors;
            return;
        }

        DateTime period = GetPeriod();
        var response = await approvalSrv.CreateRegularTimeRequest(new RegularTimeApprovalRequest
            {
                StartDate = DateFunctions.GetPeriodStartDate(period),
                EndDate = DateFunctions.GetPeriodLastDate(period),
                Period = period,
                TimesheetControlId = timesheetSrv.TimesheetControl.TimesheetPeriodId
            });

        if (response.Data)
        {
            await timesheetSrv.GetApprovalsHistory();
            comunicationSrv.SendNotification(new Notification
                {
                    NotificationType = NotificationType.Success,
                    Message = "Regular time request created successfully."
                });

            await GetTimesheetControlRecord();
            comunicationSrv.SendRefreshTimesheetAction();
            RefreshTimesheet();
        }
        else
        {
            comunicationSrv.SendNotification(new Notification
                {
                    NotificationType = NotificationType.Error,
                    Message = errorMessage
                });
        }
    }

    private DateTime GetPeriod()
        => DateFunctions.GetPeriod(_selectedYear, _selectedMonth, _selectedPeriod);

    private void SetDates((DateTime startDate, DateTime endDate) dates)
    {
        _selectedYear = dates.startDate.Year;
        _selectedMonth = dates.startDate.Month;
        _selectedPeriod = dates.startDate.Day > 15 ? 2 : 1;
    }

    private void RefreshTimesheet()
    {
        SetStringStatus();
        _contentLoaded = true;
        StateHasChanged();
    }

    private void CalculatePeriodDays()
    {
        _days = new List<(int, bool)>();
        int startDay = timesheetSrv.StartPeriod.Day;
        int endDay = timesheetSrv.EndPeriod.Day;
        for (int i = startDay; i <= endDay; i++)
        {
            _days.Add((i, IsDayOff(i)));
        }
    }

    private void CalculateTimesheetHours()
    {
        timesheetSrv.TimesheetData.Where(x => !x.IsTimeOff).ToList().ForEach(record =>
        {
            var (option, disable) = TransformBillableOption(record.Billable, record.ProjectId.Value);
            record.Billable = option;
            record.EnableBillableDrop = disable;
        });

        CalculateHours();
        CalculateHoursPerColumn();
    }

    private void CalculateHours() => timesheetSrv.TimesheetData.ForEach(record =>
            record.TotalHoursPerRow = record.Entries.Sum(x => x.TotalHours).GetDecimalWithFormat(Constants.decimalFormat));

    private void CalculateHoursPerColumn() => timesheetSrv.CalculateHoursPerColumn();

    private async Task GetApprovalsHistory() => await timesheetSrv.GetApprovalsHistory();

    private async Task GetTimeOffRecords() => _timeOffRecords = (await approvalSrv.GetTimeOffRecords(timesheetSrv.StartPeriod)).Data;

    private bool IsDayOff(int day)
    {
        DayOfWeek weekDay = new DateOnly(timesheetSrv.StartPeriod.Year, timesheetSrv.StartPeriod.Month, day).DayOfWeek;
        return weekDay == DayOfWeek.Saturday || weekDay == DayOfWeek.Sunday;
    }

    private (int?, bool) TransformBillableOption(int? billableOption, int projectId)
    {
        string projectBillingOption = _projects.FirstOrDefault(x => x.Id == projectId).TimeExpenseEntryType;
        int billingOption = billableOption ?? (projectBillingOption.Equals("Non-Billable") ? 0 : 1);
        bool enableBillingDrop = projectBillingOption.Equals("Billable & Non-Billable");
        int option = billingOption == 1
            ? _billingStatus.FirstOrDefault(x => x.Value.Equals("Billable Only")).GralId
            : _billingStatus.FirstOrDefault(x => x.Value.Equals("Non-Billable")).GralId;

        return (option, enableBillingDrop);
    }

    private void AddNewRegularTimeRecord()
    {
        CalculatePeriodDays();
        List<TimesheetEntry> entries = new List<TimesheetEntry>();
        for (int i = timesheetSrv.StartPeriod.Day; i <= timesheetSrv.EndPeriod.Day; i++)
        {
            entries.Add(new TimesheetEntry
                {
                    Day = i,
                    EntryDate = new DateTime(timesheetSrv.StartPeriod.Year, timesheetSrv.StartPeriod.Month, i),
                    TotalHours = 0,
                    Comments = string.Empty
                });
        }

        timesheetSrv.TimesheetData.Add(new TimesheetItem
            {
                Id = timesheetSrv.TimesheetData.Count + 1,
                ClientId = 0,
                ProjectId = 0,
                ActivityId = 0,
                TimeOffId = 0,
                ApprovalStatus = 0,
                Billable = _billingStatus.FirstOrDefault(x => x.Value.Equals("Billable Only")).GralId,
                Location = "Office",
                PONumber = string.Empty,
                TotalHoursPerRow = ((decimal)0).GetDecimalWithFormat(Constants.decimalFormat),
                IsNewRecord = true,
                Entries = entries
            });

        StateHasChanged();
    }

    public async Task GetTimeoffData()
    {
        List<Task> tasks = new List<Task>
        {
            GetTimeOffRecords(),
            GetTimesheetData()
        };

        await Task.WhenAll(tasks);

        comunicationSrv.SendRefreshTimesheetAction();
    }
}
