@page "/timesheet"

@inject ITimesheetService timesheetSrv
@inject ITimesheetValidationsService timesheetValidationSrv
@inject IApprovalDataService approvalSrv
@inject IComponentComunicationService comunicationSrv
@inject NavigationManager navManager

@implements IDisposable

<div class="custom-container">
    <div class="controls">
        <div class="control">
            <label>Year</label>
            <TelerikDropDownList Data="@_years"
                                 @bind-Value="@_selectedYear"
                                 TextField="Text"
                                 ValueField="Value"
                                 Size="@ThemeConstants.DropDownList.Size.Small"
                                 Width="76%">
            </TelerikDropDownList>
        </div>
        <div class="control">
            <label>Month</label>
            <TelerikDropDownList Data="@_months"
                                 @bind-Value="@_selectedMonth"
                                 TextField="Text"
                                 ValueField="Value"
                                 Size="@ThemeConstants.DropDownList.Size.Small"
                                 Width="75%"
                                 OnChange="@CalculateYears"
                                 Id="months">
            </TelerikDropDownList>
        </div>
        <div class="control">
            <label>Period</label>
            <TelerikDropDownList Data="@_periods"
                                 @bind-Value="@_selectedPeriod"
                                 TextField="Text"
                                 ValueField="Value"
                                 Size="@ThemeConstants.DropDownList.Size.Small"
                                 Width="74%"
                                 Id="period">
            </TelerikDropDownList>
        </div>
        <div>
            <button class="btn btn-info btn-sm custom-button" title="Search" @onclick="ChangePeriod">
                View <i class="fas fa-search"></i>
            </button>
        </div>
    </div>
    <div class="grid-actions">
        <div style="font-size: 15px;">
            <b> @_periodLabel </b>
        </div>
        <div>
            <button class="btn
                           btn-sm
                           status-button
                           @(SetCSSStatus())">
                @_statusStr
            </button>
        </div>
        <div>
            <button class="btn btn-primary btn-sm" title="Send to approve" @onclick=CreateRegularTimeRequest > Submit for approval </button>
            <button class="btn btn-info btn-sm custom-button" @onclick=AddNewRegularRecord>Add Regular Time</button>
            <button class="btn btn-info btn-sm custom-button" @onclick=OpenTimeOffPopUp>Add Time Off</button>
        </div>
    </div>
    @if (timesheetErrors.Any())
    {
        <div style="color: red; margin-top: 10px;">
            <ul>
                @foreach (string error in timesheetErrors)
                {
                    <li>@error</li>
                }
            </ul>
        </div>    
    }
    <div class="grid-container">
        <TimeGrid Year="_selectedYear"
                  Month="_selectedMonth"
                  Period="_selectedPeriod"
                  UserId="_userId"
                  @ref="timesheet">
        </TimeGrid>
    </div>
</div>

@code {
    private List<ListType> _months;
    private List<ListType> _years;
    private List<ListType> _periods;
    private int? _selectedYear = DateTime.Now.Year;
    private int? _selectedMonth = DateTime.Now.Month;
    private int? _selectedPeriod = DateTime.Now.Day > 15 ? 2 : 1;
    private TimeGrid timesheet;
    private string _periodLabel;
    private TimesheetControl timesheetControl;
    private string _statusStr = "Not Submited";
    private IEnumerable<string> timesheetErrors = Enumerable.Empty<string>();

    // Temp Variables
    // Replace this user id value for user id token claim
    private int _userId = 579;

    protected async override Task OnInitializedAsync()
    {
        comunicationSrv.SendChangeWidth(true);
        SetPeriodParameters();
        SetDropDownValues();
        SetPeriodDates();
        await GetTimesheetControlRecord();
        if (timesheetSrv.TimesheetControl is null)
        {
            await CreateTimesheetControl();
        }
        Console.WriteLine(JsonConvert.SerializeObject(timesheetSrv.TimesheetControl));
    }

    public void Dispose()
    {
        comunicationSrv.SendChangeWidth(false);
    }

    private async Task GetTimesheetControlRecord()
    {
        DateTime period = DateFunctions.GetPeriod(_selectedYear.Value, _selectedMonth.Value, _selectedPeriod.Value);
        await timesheetSrv.GetTimesheetControlRecord(period);
    }

    private async Task CreateTimesheetControl()
    {
        DateTime period = GetPeriod();
        await timesheetSrv.CreateTimesheetControl(period);
    }

    private void SetDropDownValues()
    {
        DateTime currentDate = DateTime.Now;

        _months = new List<ListType>
        {
            new ListType { Value = null, Text = "Select..." },
            new ListType { Value = 1, Text = "January" },
            new ListType { Value = 2, Text = "February" },
            new ListType { Value = 3, Text = "March" },
            new ListType { Value = 4, Text = "April" },
            new ListType { Value = 5, Text = "May" },
            new ListType { Value = 6, Text = "June" },
            new ListType { Value = 7, Text = "July" },
            new ListType { Value = 8, Text = "August" },
            new ListType { Value = 9, Text = "September" },
            new ListType { Value = 10, Text = "October" },
            new ListType { Value = 11, Text = "November" },
            new ListType { Value = 12, Text = "December" }
        };

        int initialYear = (currentDate.Year - 10);
        _years = new List<ListType>
        {
            new ListType { Value = null, Text = "Select..." },
        };
        for (int i = 1; i <= 10; i++)
        {
            int nextYear = initialYear + i;
            _years.Add(new ListType { Value = nextYear, Text = nextYear.ToString() });
        }

        _periods = new List<ListType>
        {
            new ListType { Value = null, Text = "Select..." },
            new ListType { Value = 1, Text = "1" },
            new ListType { Value = 2, Text = "2" }
        };
    }

    private void CalculateYears(object value)
    {
        int futureYear = (DateTime.Now.Year + 1);
        ListType nextYear = new ListType { Value = futureYear, Text = futureYear.ToString() };
        _years = _years.Where(x => x.Value != futureYear).ToList();

        if ((int)value == 1)
        {
            _years.Add(nextYear);
        }
    }

    private async Task ChangePeriod()
    {
        SetPeriodDates();
        await timesheet.CalculateNewPeriod();
    }

    private void AddNewRegularRecord()
    {
        timesheet.AddNewRegularTimeRecord();
    }

    private void OpenTimeOffPopUp()
    {
        comunicationSrv.SendOpenPopUpAction();
    }

    private void SetPeriodDates()
    {
        DateTime startDate = DateFunctions.GetPeriod(_selectedYear.Value, _selectedMonth.Value, _selectedPeriod.Value);
        DateTime endDate = DateFunctions.GetPeriodLastDate(startDate);
        _periodLabel = $"{startDate.ToString("MMM dd, yyyy")} - {endDate.ToString("MMM dd, yyyy")}";
    }

    private void SetPeriodParameters()
    {
        var uri = new Uri(navManager.Uri);
        var queryParameters = System.Web.HttpUtility.ParseQueryString(uri.Query);
        if (queryParameters.Count > 0)
        {
            int.TryParse(queryParameters["y"], out int year);
            _selectedYear = year > 0 ? year : _selectedYear;
            int.TryParse(queryParameters["m"], out int month);
            _selectedMonth = month > 0 ? month : _selectedMonth;
            int.TryParse(queryParameters["p"], out int period);
            _selectedPeriod = period > 0 ? period : _selectedPeriod;
            int.TryParse(queryParameters["u"], out int userId);
            _userId = userId > 0 ? userId : _userId;
        }
    }

    private string SetCSSStatus()
    {
        switch (timesheetSrv.TimesheetControl?.ApprovalStatusId)
        {
            case 0:
                _statusStr = "Not Submited";
                return "not-submited";
            case 1:
                _statusStr = "Pending";
                return "pending";
            case 2:
                _statusStr = "Approved";
                return "approved";
            case 3:
                _statusStr = "Rejected";
                return "rejected";
            default:
                _statusStr = "Not Submited";
                return "not-submited";
        };
    }

    private async void CreateRegularTimeRequest()
    {
        string errorMessage = "An error ocurred trying to create a regular time request";
        List<string> errors = timesheetValidationSrv.ValidateTimesheet();
        if (errors.Any())
        {
            comunicationSrv.SendNotification(new Notification
            {
                NotificationType = NotificationType.Error,
                Message = errorMessage
            });
            Console.WriteLine($"errors: {JsonConvert.SerializeObject(errors)} ");
            timesheetErrors = errors;
            return;   
        }

        comunicationSrv.SendNotification(new Notification
                {
                    NotificationType = NotificationType.Success,
                    Message = "Regular time request created successfully."
                });

        // DateTime period = GetPeriod();
        // var response = await approvalSrv.CreateRegularTimeRequest(new RegularTimeApprovalRequest
        //     {
        //         StartDate = DateFunctions.GetPeriodStartDate(period),
        //         EndDate = DateFunctions.GetPeriodLastDate(period),
        //         Period = period
        //     });

        // if (response.Data)
        // {
        //     comunicationSrv.SendNotification(new Notification
        //         {
        //             NotificationType = NotificationType.Success,
        //             Message = "Regular time request created successfully."
        //         });
        // }
        // else
        // {
        //     comunicationSrv.SendNotification(new Notification
        //         {
        //             NotificationType = NotificationType.Error,
        //             Message = errorMessage
        //         });
        // }

    }

    private DateTime GetPeriod() 
        => DateFunctions.GetPeriod(_selectedYear.Value, _selectedMonth.Value, _selectedPeriod.Value);
}
