@inject IApprovalDataService approvalSrv
@inject IGeneralDataService generalSrv
@inject IProjectDataService projectSrv
@inject ITimesheetService timesheetSrv
@inject IApprovalHistoryService approvalHistorySrv
@inject IComponentComunicationService notificationSrv

@implements IDisposable

<RegularTime Days="_days"
             BillingStatusList="_billingStatus"
             ProjectList="_projects"
             OnRegularTimeCreated="GetTimesheetData" />
<TimeoffTime Days="_days"
             TimeOffRecords="_timeOffRecords"
             OnTimeOffAction="GetTimeoffData" />
<table class="table table-bordered time-grid custom-margin-table">
    <thead class="thead-time-grid">
        <tr>
            <th style="width: 30px;"></th>
            <th rowspan="3" class="row-timeoff">Total</th>
            @if (timesheetSrv.TotalHoursPerDay.Any())
            {
                @foreach (var item in timesheetSrv.TotalHoursPerDay)
                {
                    <th class="row-day">@item.Value.GetDecimalWithFormat(Constants.decimalFormat)</th>
                }
            }
            <th style="width: 50px">&nbsp;</th>
            <th style="width: 65px">&nbsp;</th>
            <th class="row-billable">&nbsp;</th>
            <th style="width: 70px">&nbsp;</th>
        </tr>
    </thead>
</table>

@code {
    [Parameter]
    public int? Year { get; set; }
    [Parameter]
    public int? Month { get; set; }
    [Parameter]
    public int? Period { get; set; }
    [Parameter]
    public int? UserId { get; set; }

    private int _startDay = 0;
    private int _endDay = 0;
    private List<(int day, bool isWeekendDay)> _days = new List<(int day, bool isWeekendDay)>();
    Dictionary<int, string> totalHoursPerDay = new Dictionary<int, string>();
    private List<General> _billingStatus = null;
    private List<ProjectLight> _projects = new List<ProjectLight>
    {
        new ProjectLight { ClientId = 0, Id = 0, Name = "Select a project" }
    };
    private DateTime _minDate;
    private IEnumerable<TimeoffApproval> _timeOffRecords = Enumerable.Empty<TimeoffApproval>();

    protected async override Task OnInitializedAsync()
    {
        _minDate = DateFunctions.GetPeriod(Year.Value, Month.Value, Period.Value);
        timesheetSrv.SetStartAndEndPeriod(_minDate);
        CalculatePeriodDays();

        var tasks = new List<Task>
        {
            projectSrv.GetProjectsForDropDown().ContinueWith(task => _projects.AddRange(task.Result.Data)),
            generalSrv.GetGeneralValues("BillingStatus").ContinueWith(task =>
            {
                _billingStatus = task.Result.Data.Where(x => !x.Value.Equals("Billable & Non-Billable")).ToList();
            }),
            GetTimeOffRecords(),
            GetApprovalsHistory()
        };
        await Task.WhenAll(tasks);

        await GetTimesheetData();
    }

    public void Dispose()
    {
        timesheetSrv.ReleaseData();
    }

    private async Task GetTimesheetData()
    {
        await timesheetSrv.GetTimesheetRecords(UserId.Value,
            Year.Value,
            Month.Value,
            Period.Value);

        timesheetSrv.TimesheetData.Where(x => !x.IsTimeOff).ToList().ForEach(record =>
        {
            var (option, disable) = TransformBillableOption(record.Billable, record.ProjectId.Value);
            record.Billable = option;
            record.EnableBillableDrop = disable;
        });

        CalculateHours();
        CalculateHoursPerColumn();

        notificationSrv.SendRefreshTimesheetAction();
    }

    public void AddNewRegularTimeRecord()
    {
        CalculatePeriodDays();
        List<TimesheetEntry> entries = new List<TimesheetEntry>();
        for (int i = _startDay; i <= _endDay; i++)
        {
            entries.Add(new TimesheetEntry
                {
                    Day = i,
                    EntryDate = new DateTime(Year.Value, Month.Value, i),
                    TotalHours = 0,
                    Comments = string.Empty
                });
        }

        timesheetSrv.TimesheetData.Add(new TimesheetItem
            {
                Id = timesheetSrv.TimesheetData.Count + 1,
                ClientId = 0,
                ProjectId = 0,
                ActivityId = 0,
                TimeOffId = 0,
                ApprovalStatus = 0,
                Billable = _billingStatus.FirstOrDefault(x => x.Value.Equals("Billable Only")).GralId,
                Location = "Office",
                PONumber = string.Empty,
                TotalHoursPerRow = ((decimal)0).GetDecimalWithFormat(Constants.decimalFormat),
                IsNewRecord = true,
                Entries = entries
            });

        StateHasChanged();
    }

    private void CalculatePeriodDays()
    {
        _days = new List<(int, bool)>();
        _startDay = Period.HasValue && Period.Value == 1 ? 1 : 16;
        _endDay = Period.HasValue && Period.Value == 1 ? 15 : DateTime.DaysInMonth(Year.Value, Month.Value);
        for (int i = _startDay; i <= _endDay; i++)
        {
            _days.Add((i, IsDayOff(i)));
        }
    }

    public async Task CalculateNewPeriod()
    {
        _minDate = DateFunctions.GetPeriod(Year.Value, Month.Value, Period.Value);
        CalculatePeriodDays();
        var tasks = new List<Task>
        {
            timesheetSrv.CreateTimesheetControl(_minDate),
            GetTimesheetData(),
            GetTimeOffRecords(),
        };

        await Task.WhenAll(tasks);
        await GetApprovalsHistory();

        StateHasChanged();
    }

    private void CalculateHours() => timesheetSrv.TimesheetData.ForEach(record => 
            record.TotalHoursPerRow = record.Entries.Sum(x => x.TotalHours).GetDecimalWithFormat(Constants.decimalFormat));

    private bool IsDayOff(int day)
    {
        DayOfWeek weekDay = new DateOnly(Year.Value, Month.Value, day).DayOfWeek;
        return weekDay == DayOfWeek.Saturday || weekDay == DayOfWeek.Sunday;
    }

    private void CalculateHoursPerColumn()
    {
        DateTime endDate = DateFunctions.GetPeriodLastDate(_minDate);
        timesheetSrv.CalculateHoursPerColumn(_minDate, endDate);
    }

    private (int?, bool) TransformBillableOption(int? billableOption, int projectId)
    {
        string projectBillingOption = _projects.FirstOrDefault(x => x.Id == projectId).TimeExpenseEntryType;
        int billingOption = billableOption ?? (projectBillingOption.Equals("Non-Billable") ? 0 : 1);
        bool enableBillingDrop = projectBillingOption.Equals("Billable & Non-Billable");
        int option = billingOption == 1
            ? _billingStatus.FirstOrDefault(x => x.Value.Equals("Billable Only")).GralId
            : _billingStatus.FirstOrDefault(x => x.Value.Equals("Non-Billable")).GralId;

        return (option, enableBillingDrop);
    }

    public async Task GetTimeOffRecords() => _timeOffRecords = (await approvalSrv.GetTimeOffRecords(_minDate)).Data;

    public async Task GetTimeoffData()
    {
        List<Task> tasks = new List<Task>
        {
            GetTimeOffRecords(),
            GetTimesheetData()
        };

        await Task.WhenAll(tasks);
    }

    private async Task GetApprovalsHistory()
    {
        await timesheetSrv.GetApprovalsHistory();
    }
}

